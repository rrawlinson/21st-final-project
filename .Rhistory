pro.result <- fromJSON(content(map2, "parsed"))
map2 <- GET("https://maps.googleapis.com/maps/api/staticmap?size=512x512&zoom=12&center=Chicago&format=png&style=feature:road.highway%7Celement:geometry%7Cvisibility:simplified%7Ccolor:0xc280e9&style=feature:transit.line%7Cvisibility:simplified%7Ccolor:0xbababa&style=feature:road.highway%7Celement:labels.text.stroke%7Cvisibility:on%7Ccolor:0xb06eba&style=feature:road.highway%7Celement:labels.text.fill%7Cvisibility:on%7Ccolor:0xffffff&key=YOUR_API_KEY")
pro.result <- fromJSON(content(map2))
GetMap(center = c(lat = 42, lon = -76), size = c(640, 640), destfile,
zoom = 12, markers, path = "", span, frame, hl, sensor = "true",
maptype = c("roadmap", "mobile", "satellite", "terrain",
"hybrid", "mapmaker-roadmap", "mapmaker-hybrid")[2],
format = c("gif", "jpg", "jpg-baseline", "png8", "png32")[5],
extraURL = "", RETURNIMAGE = TRUE, GRAYSCALE = FALSE, NEWMAP = TRUE,
SCALE = 1, API_console_key = NULL, verbose = 0)
map2 <- GET("https://maps.googleapis.com/maps/api/staticmap?size=512x512&zoom=12&center=Chicago&format=png&style=feature:road.highway%7Celement:geometry%7Cvisibility:simplified%7Ccolor:0xc280e9&style=feature:transit.line%7Cvisibility:simplified%7Ccolor:0xbababa&style=feature:road.highway%7Celement:labels.text.stroke%7Cvisibility:on%7Ccolor:0xb06eba&style=feature:road.highway%7Celement:labels.text.fill%7Cvisibility:on%7Ccolor:0xffffff&key=YOUR_API_KEY")
map2 <- GetMap(AIzaSyCmw8XQuZX0O1fxp77Q5iT8WX8qGt8hV9Ea, center, zoom = 12, markers, path, span, frame, hl, sensor = "true",
maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")[4],
format = c("gif", "jpg", "jpg-baseline", "png8", "png32")[5],
size = c(640, 640), destfile = "MyTile.png", RETURNIMAGE = TRUE, GRAYSCALE =FALSE, verbose = 1)
map2 <- GET("https://maps.googleapis.com/maps/api/staticmap?size=512x512&zoom=12&center=Chicago&format=png&style=feature:road.highway%7Celement:geometry%7Cvisibility:simplified%7Ccolor:0xc280e9&style=feature:transit.line%7Cvisibility:simplified%7Ccolor:0xbababa&style=feature:road.highway%7Celement:labels.text.stroke%7Cvisibility:on%7Ccolor:0xb06eba&style=feature:road.highway%7Celement:labels.text.fill%7Cvisibility:on%7Ccolor:0xffffff&key=YOUR_API_KEY")
goog.results <- fromJSON(content(map2, "JPEG"))
map2 <- GET("https://maps.googleapis.com/maps/api/staticmap?size=512x512&zoom=12&center=Chicago&format=png&style=feature:road.highway%7Celement:geometry%7Cvisibility:simplified%7Ccolor:0xc280e9&style=feature:transit.line%7Cvisibility:simplified%7Ccolor:0xbababa&style=feature:road.highway%7Celement:labels.text.stroke%7Cvisibility:on%7Ccolor:0xb06eba&style=feature:road.highway%7Celement:labels.text.fill%7Cvisibility:on%7Ccolor:0xffffff&key=YOUR_API_KEY")
goog.results <- fromJSON(content(map2.JPEG))
goog.results <- fromJSON(content(map2))
map3 <- GET("style=feature:myFeatureArgument|element:myElementArgument|myRule1:myRule1Argument|myRule2:myRule2Argument")
install.packages(zipcode)
install.packages("zipcode")
library(zipcode)
data(zipcode)
zipcode
library(zipcode)
data(zipcode)
zipcode
mutate(zip = extract_numeric(zip))
library(dplyr)
ry(jsonlite)
library(dplyr)
#goog.baseUrl <- "https://developers.google.com/maps/documentation/static-maps/get-api-key"
#goog.query <- list(key= AIzaSyCmw8XQuZX0O1fxp77Q5iT8WX8qGt8hV9E)
#maps <- GET("https://maps.googleapis.com/maps/api/staticmap?center=40.714%2c%20-73.998&zoom=12&size=400&key=AIzaSyCmw8XQuZX0O1fxp77Q5iT8WX8qGt8hV9Ea")
map2 <- GET("https://maps.googleapis.com/maps/api/staticmap?size=512x512&zoom=12&center=Chicago&format=png&style=feature:road.highway%7Celement:geometry%7Cvisibility:simplified%7Ccolor:0xc280e9&style=feature:transit.line%7Cvisibility:simplified%7Ccolor:0xbababa&style=feature:road.highway%7Celement:labels.text.stroke%7Cvisibility:on%7Ccolor:0xb06eba&style=feature:road.highway%7Celement:labels.text.fill%7Cvisibility:on%7Ccolor:0xffffff&key=YOUR_API_KEY")
map3 <- GET("style=feature:myFeatureArgument|element:myElementArgument|myRule1:myRule1Argument|myRule2:myRule2Argument")
goog.results <- fromJSON(content(map2))
library(zipcode)
data(zipcode)
zipcode
mutate(zip = extract_numeric(zip))
census.key <- "2924cc95bd9d9df37860b12492f8c612a5c8efe3"
library("dplyr")
# Test out getting and editing data frame
library("dplyr")
library("httr")
library("curl")
library("jsonlite")
source("key.R")
first.base.url <- "https://api.census.gov/data/"
year <- "2016"
second.base.url <- "/acs/acs1/profile"
query <- paste0(first.base.url, year, second.base.url, "?")
key <- paste0("key=", census.key)
data <- paste0("get=", "NAME")
area <- paste0("for=", "state:*")
full.url <- paste0(query, data, "&", area, "&", area, "&", key)
print(full.url)
df <- (GET(full.url))
df1 <- fromJSON(content(df, "text"), header = TRUE)
# This makes a map of counties in Washington
counties <- map_data("county")
wa_county <- subset(counties, region == "washington")
wa_base +
geom_polygon(data = ca_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)
list <- c(98101,
98102,
98103,
98104,
98105,
98106,
98107,
98108,
98109,
98111,
98112,
98113,
98114,
98115,
98116,
98117,
98118,
98119,
98121,
98122,
98124,
98125,
98126,
98127,
98129,
98131,
98132,
98133,
98134,
98136,
98139,
98141,
98144,
98145,
98146,
98154,
98161,
98164,
98165,
98170,
98174,
98175,
98177,
98178,
98181,
98185,
98190,
98191,
98194,
98195,
source('~/Desktop/INFO_201/21st-final-project/finalNotes.R')
list <- c(98101,
98102,
98103,
98104,
98105,
98106,
98107,
98108,
98109,
98111,
98112,
98113,
98114,
98115,
98116,
98117,
98118,
98119,
98121,
98122,
98124,
98125,
98126,
98127,
98129,
98131,
98132,
98133,
98134,
98136,
98139,
98141,
98144,
98145,
98146,
98154,
98161,
98164,
98165,
98170,
98174,
98175,
98177,
98178,
98181,
98185,
98190,
98191,
98194,
98195,
98199)
source('~/Desktop/INFO_201/21st-final-project/finalNotes.R')
key <- paste0("key=", census.key)
# This makes a map of counties in Washington
counties <- map_data("county")
wa_county <- subset(counties, region == "washington")
wa_base +
geom_polygon(data = ca_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)
list <- c(98101,
98102,
98103,
98104,
98105,
98106,
98107,
98108,
98109,
98111,
98112,
98113,
98114,
98115,
98116,
98117,
98118,
98119,
98121,
98122,
98124,
98125,
98126,
98127,
98129,
98131,
98132,
98133,
98134,
98136,
98139,
98141,
98144,
98145,
98146,
98154,
98161,
98164,
98165,
98170,
98174,
98175,
98177,
98178,
98181,
98185,
98190,
98191,
98194,
98195,
98199)
View(wa_county)
View(counties)
shiny::runApp('Desktop/INFO_201/21st-final-project')
data <- paste0("get=", "NAME")
list <- c(98101,
98102,
98103,
98104,
98105,
98106,
98107,
98108,
98109,
98111,
98112,
98113,
98114,
98115,
98116,
98117,
98118,
98119,
98121,
98122,
98124,
98125,
98126,
98127,
98129,
98131,
98132,
98133,
98134,
98136,
98139,
98141,
98144,
98145,
98146,
98154,
98161,
98164,
98165,
98170,
98174,
98175,
98177,
98178,
98181,
98185,
98190,
98191,
98194,
98195,
98199)
# This makes a map of counties in Washington
counties <- map_data("county")
wa_county <- subset(counties, region == "washington")
wa_base +
geom_polygon(data = ca_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)
list <- c(98101,
98102,
98103,
98104,
98105,
98106,
98107,
98108,
98109,
98111,
98112,
98113,
98114,
98115,
98116,
98117,
98118,
98119,
98121,
98122,
98124,
98125,
98126,
98127,
98129,
98131,
98132,
98133,
98134,
98136,
98139,
98141,
98144,
98145,
98146,
98154,
98161,
98164,
98165,
98170,
98174,
98175,
98177,
98178,
98181,
98185,
98190,
98191,
98194,
98195,
98199)
is.data.frame(counties)
counties <- map_data("county")
source('~/Desktop/INFO_201/21st-final-project/test.R')
# Test out getting and editing data frame
library("dplyr")
library("httr")
library("curl")
library("jsonlite")
source("key.R")
first.base.url <- "https://api.census.gov/data/"
year <- "2016"
second.base.url <- "/acs/acs1/profile"
query <- paste0(first.base.url, year, second.base.url, "?")
key <- paste0("key=", census.key)
data <- paste0("get=", "NAME")
area <- paste0("for=", "state:*")
full.url <- paste0(query, data, "&", area, "&", area, "&", key)
print(full.url)
df <- (GET(full.url))
df1 <- fromJSON(content(df, "text"), header = TRUE)
View(df)
is.data.frame(df)
View(df1)
df1
as.data.frame(df)
as.data.frame(df1)
install.packages(leaflet)
install.packages('leaflet')
shinyApp(ui, server)
install.packages('shiny')
library(leaflet)
library(shiny)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(shiny)
library(leaflet)
library(maps)
library(maptools)
library(sp)
library(rgeos)
mapStates = map("state", fill = TRUE, plot = FALSE)
mapCounty = map("county", fill = TRUE, plot = FALSE)
shinyApp(
ui = fluidPage(leafletOutput('myMap'),
br(),
leafletOutput('myMap2')),
server <- function(input, output, session) {
output$myMap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)) %>%
addPolygons(lng = mapStates$x,
lat = mapStates$y,
fillColor = topo.colors(10, alpha = NULL),
stroke = FALSE)
})
observeEvent(input$myMap_shape_click, {
click <- input$myMap_shape_click
if(is.null(click))
return()
lat <- click$lat
lon <- click$lng
coords <- as.data.frame(cbind(lon, lat))
point <- SpatialPoints(coords)
mapStates_sp <- map2SpatialPolygons(mapStates, IDs = mapStates$names)
i <- point [mapStates_sp, ]
selected <- mapStates_sp [i]
mapCounty_sp <- map2SpatialPolygons(mapCounty, IDs = mapCounty$names)
z <- over(mapCounty_sp, selected)
r <- mapCounty_sp[(!is.na(z))]
output$myMap2 <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)) %>%
addPolygons(data=r,
fillColor = topo.colors(10, alpha = NULL),
stroke = FALSE)
})
})
})
install.packages("RColorBrewer")
install.packages("raster")
library(raster)
library(shiny)
library(leaflet)
library(RColorBrewer)
#load in shapefiles for state and county level
states <- getData("GADM", country = "rwa", level = 1)
counties <- getData("GADM", country = "rwa", level = 2)
#define color palettes for states
pal <- brewer.pal(8, "Dark2")
statePal <- colorFactor(pal, states@data$NAME_1)
shinyApp(
ui = fluidPage(
leafletOutput('myMap', width = "100%"),
br(),
leafletOutput("myMap2", width = "100%")
), #END UI
server <- function(input, output, session){
#default state level map output
output$myMap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = states,
fillColor = ~statePal(states@data$NAME_1),
fillOpacity = 1,
color = "white",
stroke = T,
weight = 1,
layerId = states@data$NAME_1) #this sets the click id, very important!
}) #END RENDERLEAFLET OUTPUT
observeEvent(input$myMap_shape_click, {
#define click object
click <- input$myMap_shape_click
#subset counties shapefile so that only counties from the clicked state are mapped
selected <- counties[counties$NAME_1 == click$id,]
#define color palette for counties
countyPal <- colorFactor(pal, selected@data$NAME_2)
#if click id isn't null (i.e. if ANY polygon is clicked on), draw map of counties
if(!is.null(click$id)){
output$myMap2 <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = selected,
fillColor = ~countyPal(selected@data$NAME_2),
fillOpacity = 1,
color = "white",
stroke = T,
weight = 1)
}) #END RENDERLEAFLET
} #END CONDITIONAL
}) #END OBSERVE EVENT
}) #END SHINYAPP
shiny::runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
shiny::runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
shiny::runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
runApp('Desktop/INFO_201/21st-final-project')
